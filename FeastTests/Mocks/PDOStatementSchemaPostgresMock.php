<?php

/**
 * Copyright 2022 Jeremy Presutti <Jeremy@Presutti.us>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

declare(strict_types=1);

namespace Mocks;

/**
 * Class PDOStatementPostgresMock extends PDOStatementMock.
 * This class is solely to be used to test functions in the Database class.
 * DO NOT USE IN PRODUCTION AS NO QUERIES WILL BE EXECUTED!
 */
class PDOStatementSchemaPostgresMock extends PDOStatementMock
{
    protected array $params = [];

    public function execute($params = null)
    {
        if ( is_array($params ) ) {
            $this->params = $params;
        }
        return parent::execute($params); // TODO: Change the autogenerated stub
    }

    /**
     * @param int|null $mode
     * @param int $cursorOrientation
     * @param int $cursorOffset
     * @return false|\stdClass
     */
    public function fetch($mode = null, $cursorOrientation = \PDO::FETCH_ORI_NEXT, $cursorOffset = 0)
    {
        
        if ( $this->offset === 4 || $this->query === 'DESCRIBE test_schema_no' ) {
            return false;
        }
        $this->offset++;

        if ( str_starts_with($this->query, 'SELECT a.attname,')) {
            if ( $this->offset === 3 ) {
                return false;
            }
            $return = new \stdClass();
            $return->data_type = 'timestamp';
            $return->attname = 'id';
            return $return;
        }
        if ( str_starts_with($this->query, 'select pg_get_serial_sequence') ) {
            if ( $this->offset === 2 ) {
                return false;
            } elseif ( in_array('false',$this->params) ) {
                return false;
            }
            $return = new \stdClass();
            $return->pg_get_serial_sequence = 'test';
            return $return;
        }
        if ( $this->offset === 1 ) {
            $return = new \stdClass();
            $return->data_type = 'varchar(255)';
            $return->column_name = 'test';
            $return->Key = 'PRI';
            $return->is_nullable = 'YES';
        }
        elseif ( $this->offset === 2 ) {
            $return = new \stdClass();
            $return->data_type = 'timestamp';
            $return->column_name = 'created';
            $return->Key = '';
            $return->is_nullable = 'YES';
        } elseif ( $this->offset === 3 ) {
            $return = new \stdClass();
            $return->data_type = 'timestamp';
            $return->column_name = 'created';
            $return->Key = '';
            $return->is_nullable = 'YES';
            $return->attname = 'test';
        } else {
                $return = new \stdClass();
                $return->data_type = 'smallint';
                $return->column_name = 'id';
                $return->Key = 'PRI';
                $return->is_nullable = 'YES';
        }
        
        return $return;
    }

   
}
